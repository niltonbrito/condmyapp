/*!
 * Start Bootstrap - SB Admin 2 v4.1.4 (https://startbootstrap.com/theme/sb-admin-2)
 * Copyright 2013-2021 Start Bootstrap
 * Licensed under MIT (https://github.com/StartBootstrap/startbootstrap-sb-admin-2/blob/master/LICENSE)
 */

! function (l) {
   "use strict";
   l("#sidebarToggle, #sidebarToggleTop").on("click", function (e) {
      l("body").toggleClass("sidebar-toggled"), l(".sidebar").toggleClass("toggled"), l(".sidebar").hasClass("toggled") && l(".sidebar .collapse").collapse("hide")
   }), l(window).resize(function () {
      l(window).width() < 768 && l(".sidebar .collapse").collapse("hide"), l(window).width() < 480 && !l(".sidebar").hasClass("toggled") && (l("body").addClass("sidebar-toggled"), l(".sidebar").addClass("toggled"), l(".sidebar .collapse").collapse("hide"))
   }), l("body.fixed-nav .sidebar").on("mousewheel DOMMouseScroll wheel", function (e) {
      var o;
      768 < l(window).width() && (o = (o = e.originalEvent).wheelDelta || -o.detail, this.scrollTop += 30 * (o < 0 ? 1 : -1), e.preventDefault())
   }), l(document).on("scroll", function () {
      100 < l(this).scrollTop() ? l(".scroll-to-top").fadeIn() : l(".scroll-to-top").fadeOut()
   }), l(document).on("click", "a.scroll-to-top", function (e) {
      var o = l(this);
      l("html, body").stop().animate({
         scrollTop: l(o.attr("href")).offset().top
      }, 1e3, "easeInOutExpo"), e.preventDefault()
   })
}(jQuery);

/* Custom para Login */
addEventListener("DOMContentLoaded", () => {
   const password = document.getElementById("password");
   const confirmPassword = document.getElementById("confirmPassword");
   const confirmMessage = document.getElementById("confirm-message");
   const passwordAlert = document.getElementById("password-alert");

   const requirements = document.querySelectorAll(".requirements");
   const leng = document.querySelector(".leng");
   const bigLetter = document.querySelector(".big-letter");
   const num = document.querySelector(".num");
   const specialChar = document.querySelector(".special-char");

   // Adiciona "wrong" para começar
   requirements.forEach((element) => element.classList.add("wrong"));

   password.addEventListener("focus", () => {
      passwordAlert.classList.remove("d-none");
      if (!password.classList.contains("is-valid")) {
         password.classList.add("is-invalid");
      }
   });

   password.addEventListener("input", () => {
      const value = password.value;
      const isLengthValid = value.length >= 8;
      const hasUpperCase = /[A-Z]/.test(value);
      const hasNumber = /\d/.test(value);
      const hasSpecialChar = /[!@#$%^&*()\[\]{}\\|;:'",<.>/?`~]/.test(value);

      atualizarRegra(leng, isLengthValid);
      atualizarRegra(bigLetter, hasUpperCase);
      atualizarRegra(num, hasNumber);
      atualizarRegra(specialChar, hasSpecialChar);

      const isPasswordValid = isLengthValid && hasUpperCase && hasNumber && hasSpecialChar;

      if (isPasswordValid) {
         password.classList.remove("is-invalid");
         password.classList.add("is-valid");
         passwordAlert.classList.remove("alert-warning");
         passwordAlert.classList.add("alert-success");
      } else {
         password.classList.remove("is-valid");
         password.classList.add("is-invalid");
         passwordAlert.classList.add("alert-warning");
         passwordAlert.classList.remove("alert-success");
      }

      validarConfirmacao();
   });

   confirmPassword.addEventListener("input", validarConfirmacao);

   function atualizarRegra(elemento, condicao) {
      elemento.classList.toggle("good", condicao);
      elemento.classList.toggle("wrong", !condicao);

      const icones = elemento.querySelectorAll("i");
      if (icones.length >= 2) {
         icones[0].classList.toggle("d-none", !condicao); // ✅ check
         icones[1].classList.toggle("d-none", condicao); // ❌ times
      }
   }

   function validarConfirmacao() {
      if (!confirmPassword.value) {
         confirmMessage.classList.add("d-none");
         return;
      }

      if (confirmPassword.value === password.value) {
         confirmMessage.textContent = "✅ As senhas coincidem";
         confirmMessage.classList.remove("d-none", "text-danger");
         confirmMessage.classList.add("text-success");
      } else {
         confirmMessage.textContent = "❌ As senhas não coincidem";
         confirmMessage.classList.remove("d-none", "text-success");
         confirmMessage.classList.add("text-danger");
      }
   }

   password.addEventListener("blur", () => {
      passwordAlert.classList.add("d-none");
   });


});

// Initialization for ES Users
document.addEventListener("DOMContentLoaded", () => {
   const passwordField = document.getElementById("password");
   const toggleIcon = document.getElementById("show-password-toggle-icon");

   toggleIcon.addEventListener("click", () => {
      const isPassword = passwordField.type === "password";
      passwordField.type = isPassword ? "text" : "password";
      toggleIcon.classList.toggle("fa-eye");
      toggleIcon.classList.toggle("fa-eye-slash");
   });
});

// Checkbox
const passwordInput1 = document.getElementById('password');
const passwordInput2 = document.getElementById('confirmPassword');
const toggleCheckbox = document.getElementById('show-password-toggle-checkbox');
if (toggleCheckbox) {
   toggleCheckbox.addEventListener('change', () => {
      const type = toggleCheckbox.checked ? 'text' : 'password';
      passwordInput1.type = type;
      passwordInput2.type = type;
   });
}

document.addEventListener("DOMContentLoaded", function () {
   var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
   var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
      return new bootstrap.Tooltip(tooltipTriggerEl);
   });
});

document.addEventListener("DOMContentLoaded", function () {
   const searchInput = document.getElementById("searchInput");
   const tableRows = document.querySelectorAll("#dataTable tbody tr");

   searchInput.addEventListener("keyup", function () {
      const searchValue = searchInput.value.toLowerCase();

      tableRows.forEach(row => {
         const nome = row.cells[1].textContent.toLowerCase(); // Coluna Nome
         const email = row.cells[2].textContent.toLowerCase(); // Coluna Email
         const status = row.cells[4].textContent.toLowerCase(); // Coluna Status
         const grupo = row.cells[5].textContent.toLowerCase(); // Coluna Grupo

         if (nome.includes(searchValue) || email.includes(searchValue) || status.includes(searchValue) || grupo.includes(searchValue)) {
            row.style.display = "";
         } else {
            row.style.display = "none";
         }
      });
   });
});

function confirmarExclusao(url) {
    if(confirm('Confirma a exclusão do usuário?')) {
        window.location.href = url;
    }
}

document.addEventListener("DOMContentLoaded", function() {
    const groupSelect = document.getElementById("userGroup");
    const cpfField = document.getElementById("cpf");
    const cnpjField = document.getElementById("cnpj");

    function toggleFields() {
        if (groupSelect.value === "FORNECEDOR") {
            cpfField.classList.add("d-none");
            cpfField.querySelector("input").removeAttribute("required");

            cnpjField.classList.remove("d-none");
            cnpjField.querySelector("input").setAttribute("required", "true");
        } else {
            cnpjField.classList.add("d-none");
            cnpjField.querySelector("input").removeAttribute("required");

            cpfField.classList.remove("d-none");
            cpfField.querySelector("input").setAttribute("required", "true");
        }
    }

    // executa ao carregar a página (caso já venha preenchido)
    toggleFields();

    // executa sempre que mudar o grupo
    groupSelect.addEventListener("change", toggleFields);
});

$(document).ready(function(){
     $('#cpf').mask('000.000.000-00', {reverse: true});
     $('#cnpj').mask('00.000.000/0000-00', {reverse: true});
 });
 
 function mascaraCpf(input) {
     let valor = input.value.replace(/\D/g, ""); // remove tudo que não é número
     if (valor.length > 11) valor = valor.substring(0, 11); // limita 11 dígitos

     if (valor.length <= 3) {
         input.value = valor;
     } else if (valor.length <= 6) {
         input.value = valor.replace(/(\d{3})(\d+)/, "$1.$2");
     } else if (valor.length <= 9) {
         input.value = valor.replace(/(\d{3})(\d{3})(\d+)/, "$1.$2.$3");
     } else {
         input.value = valor.replace(/(\d{3})(\d{3})(\d{3})(\d{2})/, "$1.$2.$3-$4");
     }
 }
 
 function mascaraPhone(input) {
     let valor = input.value.replace(/\D/g, ""); // apenas números

     if (valor.length > 11) valor = valor.substring(0, 11); // máximo 11 dígitos

     if (valor.length <= 10) {
         // Telefone fixo: (71) 4568-7659
         input.value = valor.replace(/(\d{2})(\d{4})(\d{0,4})/, "($1) $2-$3");
     } else {
         // Celular: (71) 94568-7659
         input.value = valor.replace(/(\d{2})(\d{5})(\d{0,4})/, "($1) $2-$3");
     }
 }


 $(document).ready(function() {
    $('#dataTable').DataTable({
        paging: true,
        ordering: true,
        info: true,
        searching: true,
        language: {
            decimal:        "",
            emptyTable:     "Nenhum registro encontrado",
            info:           "Mostrando _START_ a _END_ de _TOTAL_ registros",
            infoEmpty:      "Mostrando 0 a 0 de 0 registros",
            infoFiltered:   "(filtrado de _MAX_ registros no total)",
            infoPostFix:    "",
            thousands:      ",",
            lengthMenu:     "Mostrar _MENU_ registros",
            loadingRecords: "Carregando...",
            processing:     "Processando...",
            search:         "Pesquisar:",
            zeroRecords:    "Nenhum registro encontrado",
            paginate: {
                first:      "Primeiro",
                last:       "Último",
                next:       "Próximo",
                previous:   "Anterior"
            },
            aria: {
                sortAscending:  ": ativar para ordenar a coluna de forma ascendente",
                sortDescending: ": ativar para ordenar a coluna de forma descendente"
            }
        }
    });
});

  $(document).ready(function(){
    $('#datepicker').datepicker({
      format: 'dd/mm/yyyy',
      language: 'pt-BR',
      autoclose: true
    });
  });